name: Testje

on:
  workflow_dispatch:

jobs:
  build:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Cache NPM
      uses: actions/cache@v3
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Paket
      uses: actions/cache@v3
      env:
        cache-name: cache-paket
      with:
        path: packages
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Python
      uses: actions/cache@v3
      env:
        cache-name: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash
      #REPOSITORY_NAME = streetname-registry
    - name: Setup Node.js
      uses: actions/setup-node@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo Version is: $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

     #
     # Save artifacts
     #
      
    - name: Save artifacts
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        echo Version is $SEMVER
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/api-backoffice:$SEMVER -o ~/sr-api-backoffice-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/api-legacy:$SEMVER -o ~/sr-api-legacy-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/api-oslo:$SEMVER -o ~/sr-api-oslo-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/api-crab-import:$SEMVER -o ~/sr-api-crab-import-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/api-extract:$SEMVER -o ~/sr-api-extract-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/projector:$SEMVER -o ~/sr-projector-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/projections-syndication:$SEMVER -o ~/sr-projections-syndication-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/consumer:$SEMVER -o ~/sr-consumer-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/producer:$SEMVER -o ~/sr-producer-image.tar
        docker image save $BUILD_DOCKER_REGISTRY/streetname-registry/migrator-streetname:$SEMVER -o ~/sr-migrator-streetname-image.tar
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        SEMVER: ${{ env.RELEASE_VERSION }}

    #
    # Upload artifacts
    #
        
    - name: Upload api-backoffice artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: api-backoffice
        path: ~/sr-api-backoffice-image.tar
        
    - name: Upload api-legacy artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: api-legacy
        path: ~/sr-api-legacy-image.tar
        
    - name: Upload api-oslo artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: api-oslo
        path: ~/sr-api-oslo-image.tar
        
    - name: Upload api-crab-import artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: api-crab-import
        path: ~/sr-api-crab-import-image.tar
        
    - name: Upload api-extract artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: api-extract
        path: ~/sr-api-extract-image.tar
        
    - name: Upload projector artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: projector
        path: ~/sr-projector-image.tar
        
    - name: Upload projections-syndication artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: projections-syndication
        path: ~/sr-projections-syndication-image.tar
        
    - name: Upload consumer artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: consumer
        path: ~/sr-consumer-image.tar
        
    - name: Upload producer artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: producer
        path: ~/sr-producer-image.tar
        
    - name: Upload migrator-streetname artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: migrator-streetname
        path: ~/sr-migrator-streetname-image.tar

#    - name: Package Lambda functions        
#      if: env.RELEASE_VERSION != 'none'
#      shell: bash
#      run: |
#        echo Zip lambda functions
#        echo pwd
#        pwd
#        #echo ls -al /home/runner/work/streetname-registry/streetname-registry/dist/
#        #ls -al /home/runner/work/streetname-registry/streetname-registry/dist/
#        #echo ls -al /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda
#        #ls -al /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda
#
#        echo zip -r lambda.zip /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        #pushd /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        echo ls -al /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        ls -al /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        cd /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        zip -r lambda.zip .
#        #popd

#    - name: Push Lambda functions to Test
#      if: env.RELEASE_VERSION != 'none'
#      shell: bash
#      run: |
#        echo Push Lambda functions to Test
#        pushd /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        echo aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        popd
#      env:
#        SEMVER: ${{ env.RELEASE_VERSION }}

#    - name: Push Lambda functions to Staging
#      if: env.RELEASE_VERSION != 'none'
#      shell: bash
#      run: |
#        echo Push Lambda functions to Staging
#        pushd /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        echo aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        popd
#      env:
#        SEMVER: ${{ env.RELEASE_VERSION }}

#    - name: Push Lambda functions to Production
#      if: env.RELEASE_VERSION != 'none'
#      shell: bash
#      run: |
#        #echo Push Lambda functions to Production
#        #pushd /home/runner/work/streetname-registry/streetname-registry/dist/StreetNameRegistry.Api.BackOffice.Handlers.Sqs.Lambda/linux
#        #echo aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        #aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-sr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
#        #popd
#     env:
#       SEMVER: ${{ env.RELEASE_VERSION }}
        
#    - name: Publish to NuGet
#      if: env.RELEASE_VERSION != 'none'
#      shell: bash
#      run: |
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.BackOffice.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.BackOffice.Abstractions.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.Legacy.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.Oslo.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.Extract.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Api.CrabImport.$SEMVER.nupkg
#        node packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-nuget.js dist/nuget/Be.Vlaanderen.Basisregisters.StreetNameRegistry.Projector.$SEMVER.nupkg
#      env:
#        SEMVER: ${{ env.RELEASE_VERSION }}
#        NUGET_HOST: ${{ secrets.NUGET_HOST }}
#        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
#

#  test: # deploy to TEST environment
#    uses: ./.github/workflows/test.yml
#    with:
#      version: env.RELEASE_VERSION

  publish_to_atlassian:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v3
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Publish to Confluence
        if: needs.build.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

      - name: Create Jira Release
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
          JIRA_PREFIX: StreetName
          JIRA_PROJECT: GAWR
          JIRA_VERSION: ${{ env.RELEASE_VERSION }}

  push_images_to_test:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Push images to Test
    runs-on: ubuntu-latest
    steps:
      - name: Show version
        if: needs.build.outputs.version != 'none'
        run: echo Version is: ${{ needs.build.outputs.version }}
      
      - name: Configure AWS credentials (Test)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Test)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v1.5.1

      #
      # Download artifacts
      #
      
      - name: Download api-backoffice
        uses: actions/download-artifact@v3
        with:
          name: api-backoffice
          path: ~/
      
      - name: Download api-legacy
        uses: actions/download-artifact@v3
        with:
          name: api-legacy
          path: ~/
      
      - name: Download api-oslo
        uses: actions/download-artifact@v3
        with:
          name: api-oslo
          path: ~/
      
      - name: Download api-crab-import
        uses: actions/download-artifact@v3
        with:
          name: api-crab-import
          path: ~/
      
      - name: Download api-extract
        uses: actions/download-artifact@v3
        with:
          name: api-extract
          path: ~/
      
      - name: Download projector
        uses: actions/download-artifact@v3
        with:
          name: projector
          path: ~/
      
      - name: Download projections-syndication
        uses: actions/download-artifact@v3
        with:
          name: projections-syndication
          path: ~/
      
      - name: Download consumer
        uses: actions/download-artifact@v3
        with:
          name: consumer
          path: ~/
      
      - name: Download producer
        uses: actions/download-artifact@v3
        with:
          name: producer
          path: ~/
      
      - name: Download migrator-streetname
        uses: actions/download-artifact@v3
        with:
          name: migrator-streetname
          path: ~/

      #
      # Load artifacts
      #
      
      - name: Load api-backoffice image
        shell: bash
        run: docker image load -i ~/sr-api-backoffice-image.tar

      - name: Push docker images to ECR Test
        if: needs.build.outputs.version != 'none'
        shell: bash
        run: |
          echo $SEMVER
          echo docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-backoffice:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-backoffice:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-legacy:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-oslo:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-crab-import:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/api-extract:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/projector:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/projections-syndication:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/consumer:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/producer:$SEMVER"
          docker push "$BUILD_DOCKER_REGISTRY/streetname-registry/migrator-streetname:$SEMVER"
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.build.outputs.version }}
          WORKSPACE: ${{ github.workspace }}
